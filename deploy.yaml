name: deploy
on:
  push:
    branches:
      - deploy

env:
  AWS_DEFAULT_REGION: ap-northeast-1
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  AWS_LAMBDA_FUNCTION_NAME: YOUR_LAMBDA_FUNCTION_NAME
  AWS_ECR_REPOSITORY: YOUR_ECR_REPOSITORY

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: build
        run: |
          cargo build --release

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.AWS_ECR_REPOSITORY }}:$IMAGE_TAG -f ./Dockerfile .
          docker push $ECR_REGISTRY/${{ env.AWS_ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ env.AWS_ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update Lambda function
        id: update-lambda-function
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.AWS_LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ steps.build-image.outputs.image }}
      - name: Wait for Lambda function update
        run: |
          aws lambda wait function-updated-v2 --function-name ${{ env.AWS_LAMBDA_FUNCTION_NAME }}
      - name: Publish Lambda function version
        run: |
          aws lambda publish-version --function-name ${{ env.AWS_LAMBDA_FUNCTION_NAME }}
